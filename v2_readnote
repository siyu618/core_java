Chapter 1 : Streams and Files
a. Streams
   * input stream : an object from which we can read a sequence of bytes
   * output stream : an object from which we can write a sequence of bytes 
   * Read and write bytes
      * int read()
	  * void write(int b)
   * By default, streams are not buffered.  Every call to ready asks the OS. 
      * DataInputStream din = new DataInputStream( new BufferedInputStream ( new FileInputStream("test.dat")))
   * PushBackInputStream
b. Text Input and Output
   * Write text output
      * PrintWriter out = new PrintWriter("output.txt"); <==> PrintWriter out = new PrintWriter(new FileWriter("output.txt"));
   * Read Text input
      * BufferedReader in = new BufferedReader( new FileReader("input.txt") );
   * Charset
      in new io	  
c. Reading and writing Binary Data
   * DataInputStream, DataOutputStream
   * Random-Access Files 
      * When you open an existing file RandomAccessFile, it does not get deleted.
	  * RandomAccessFile in = new RandomAccessFile("employee.dat", "r");
	  * RandomAccessFile inOut = new RandomAccessFile("employee.dat", "rw");
	     * length is diffcult for string type 
		    * writeFixedString()  : pads the string, using zero values
		    * readFixedString() : read until the zero value, and skip the remaining zero values
			* java char : has 2 bytes
d. ZIP Archives
   * ZipInputStream zin = new ZipInputStream(new FileInputStream(zipname));
   * ZipEntry entry;
   * while ((entry = zin.getNextEntry) != null ) {
   *    analyze entry;
   *    read the contents of zin;
   *    zin.closeEntry();
   * }
   * zin.close;
e. Object Streams and Serializations
   * implements Serializable interface, and don't have to override any method.
   * ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("employee.dat"));
      * out.writeObject(obj);
   * If one object is shared by several object.
      * each object is saved with a serial number. 

   * Modifying the Default Serialization Mechanism
      * Certain data fields should not be serialized.
	     * like file handler, non-serializable classes
		 * keyword : transient
      * Externalizable
	     * readExternal, writeExternal
   * Serializing Singletons and Type safe Enumeration
      * readResolve() 
   * Version-ing
      * keep serialVersionUID the same.
   * Using Serialization for Cloning
      * To get clone free, just extend the SerialCloneable class.
f. File Management
g. New I/O
   * java.nio
      * Character set encoders and decodes
	  * Non-blocking I/O
	  * Memory-mapped files
	  * File locking
   * Memory-mapped files
      * Plain Input Stream, Random Access File
	  * Buffered Input Stream, Memory Mapped file
   * ByteBuffer
      * mainly used in network programming
   * FileLock
      * Can lock part or all of a file
      * System dependent
h. Regular Expression
   * java.util.regex
       * Pattern, Matcher
          * replaceAll(), find(), group()

Chapter 2. XML (Extensible Markup Language)
a. Parsing an XML Document
   * DOM (Document Object Model)
   * SAX (Simple API for XML)
b. Validating an XML
   * DTD (Data Type Definitions)
   * XML Schema : Something more complex than the DTD
c. Locating Information with XPath
   * javax.xml.xpath
d. Using namespace
   * DocumentBuilderFactory.setNamespaceAware(true);
e. Generating XML Documents
   * javax.xml.parsers.DocumentBuilder
   * javax.xml.transform.Transformer
   * javax.xml.stream.XMLOutputFactory
f. XSL Transformations
   * Transform one format to another

Chapter 3. Networking
a. Connecting to a server
   * telnet host port
   * Socket with timeout
   * Internet address: one host may has many address due to load balance
b. Implementing a Server
   * ServerSocket()
   * Service side has a loop to accept the connection from clients, each client is processed by a separate thread.
   * Half close
      * provides the ability for one end to close its output stream
c. Interruptable Sockets
   * To interrupt a socket, use SocketChannel.
      * SocketChannel channel = SocketChannel.open(new InetSocketAddress(host, port));
      * Scanner in = new Scanner(channel);
      * OutputStream outStream = Channels.newOutputStream(channel);
d. Sending E-Mail
   * Open a socket to the mail server with SMTP protocol
   * Send message in SMTP protocol
e. Making URL connections
   * URL and URI
      * URL is a kind of URI: URL can specify a resource, other URI is URN (Uniform resource name)
      * URI
         * Relative and absolute
      * URLEncoder.encode(value, "UTF-8")
   * Post Form data
      * InputStream err = ((HttpURLConnection) connection).getErrorStream();

Chapter 4. Database Programming
a. The JDBC Design
b. The Structured Query Language(SQL)
c. JDBC Configuration
d. Executing SQL Statements
e. Query Execution
   * PreparedStatement
      * setXXX()
   * A rule of thumb : If you can do it in the SQL, don't do it in th Java.
   * Reading and Writing Large Objects(LOBs)
      * Binary Large Object (BLOB)
      * Character large Object (CLOB)
   * SQL Escapes
      * Date and Time
      * Call scalar functions
      * Call stored procedures
      * Outer joins
      * The escape character in LIKE
   * Multiple Results
      * multiple select in a single query
   * Retrieving Auto-generated Keys

	  	  

   